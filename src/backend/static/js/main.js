document.addEventListener('DOMContentLoaded', function() {
    const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]').value;

    // --- –õ–æ–≥–∏–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–¥–∞—á ---
    const addTaskModal = document.getElementById('add-task-modal');
    const addTaskBtn = document.getElementById('add-task-btn');
    const closeBtn = addTaskModal.querySelector('.modal-close-btn');
    const addTaskForm = document.getElementById('add-task-form');

    if (addTaskBtn) {
        addTaskBtn.addEventListener('click', () => {
            addTaskModal.style.display = 'flex';
        });

        closeBtn.addEventListener('click', () => {
            addTaskModal.style.display = 'none';
        });

        addTaskModal.addEventListener('click', (e) => {
            if (e.target === addTaskModal) {
                addTaskModal.style.display = 'none';
            }
        });

        addTaskForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(addTaskForm);
            const submitBtn = addTaskForm.querySelector('button[type="submit"]');

            clearFormErrors(addTaskForm);
            
            try {
                const response = await fetch(addTaskForm.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRFToken': csrfToken,
                        'X-Requested-With': 'XMLHttpRequest' // –í–∞–∂–Ω–æ –¥–ª—è Django
                    },
                });

                // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
                submitBtn.disabled = true;
                submitBtn.textContent = '–î–æ–±–∞–≤–ª—è–µ–º...';

                const result = await response.json();

                if (result.success) {
                    addTaskToDOM(result.task);
                    addTaskModal.style.display = 'none';
                    addTaskForm.reset();
                } else if (result.errors) {
                    displayFormErrors(addTaskForm, result.errors);
                } else {
                    // –û–±—â–∞—è –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ–ª–µ errors –Ω–µ –ø—Ä–∏—à–ª–æ
                    alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞.');
            } finally {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                submitBtn.disabled = false;
                submitBtn.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É';
            }
        });
    }

    // --- –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
    const docUploadInput = document.getElementById('document-upload-input');
    if (docUploadInput) {
        docUploadInput.addEventListener('change', async (e) => {
            const files = e.target.files;
            if (files.length === 0) return;

            const formData = new FormData();
            for (const file of files) {
                formData.append('files', file);
            }

            try {
                const response = await fetch('/documents/upload/', { // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-CSRFToken': csrfToken,
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                });

                const result = await response.json();

                if (result.success) {
                    result.documents.forEach(addDocumentToDOM);
                } else {
                    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + result.error);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.');
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª —Å–Ω–æ–≤–∞
            e.target.value = '';
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function addTaskToDOM(task) {
    const container = document.getElementById('task-list-container');
    const emptyState = container.querySelector('.empty-state');
    if (emptyState) emptyState.remove();

    let tagsHTML = '';
    if (task.tags && task.tags.length > 0) {
        tagsHTML = `<div class="task-tags">${task.tags.map(tag => `<span class="tag">${tag.name}</span>`).join('')}</div>`;
    }

    const taskHTML = `
        <li class="task-item">
            <div class="task-info">
                <div class="task-name">${task.name}</div>
                <div class="task-meta">
                    ${task.end_time ? `‚è∞ –¥–æ ${new Date(task.end_time).toLocaleString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' })}` : ''}
                </div>
                ${tagsHTML}
            </div>
        </li>
    `;
    container.insertAdjacentHTML('afterbegin', taskHTML);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function addDocumentToDOM(doc) {
    const container = document.getElementById('doc-list-container');
    const emptyState = container.querySelector('.empty-state');
    if (emptyState) emptyState.remove();

    const docHTML = `
        <li class="doc-item">
            <div class="doc-info">
                <div class="doc-name">üìÑ ${doc.name}</div>
                <div class="doc-meta">
                    .${doc.extension} ‚Ä¢ ${doc.uploaded_at_formatted}
                </div>
            </div>
        </li>
    `;
    container.insertAdjacentHTML('afterbegin', docHTML);
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Ñ–æ—Ä–º ---

function displayFormErrors(form, errors) {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
    for (const fieldName in errors) {
        const field = form.querySelector(`[name=${fieldName}]`);
        if (field) {
            const errorContainer = field.parentElement.querySelector('.field-error');
            if (errorContainer) {
                errorContainer.textContent = errors[fieldName].join(' ');
            }
        }
    }
}

function clearFormErrors(form) {
    form.querySelectorAll('.field-error').forEach(el => {
        el.textContent = '';
    });
}